import java.util.Random;

public class Program
{
	static KeyboardInputClass keyboardInput = new KeyboardInputClass();
	static TextFileClass textFile = new TextFileClass(0);
	static Random randomNumber = new Random();
	static String[] sequence = new String[1];
		
	public static void main(String[] args)
	{
		System.out.println("A Model of Shotgun Sequencing");
		System.out.println();
		System.out.println("1 - Randomly generate a sequence");
		System.out.println("2 - Enter a sequence from a text file");
		System.out.println("3 - Enter a sequence manually");
		System.out.println();
		int choice = Integer.parseInt(keyboardInput.getKeyboardInput("Please Enter a Menu Choice"));
				
		System.out.println();

		if((choice == 1) || (choice > 3))
		{
			//In Venter's first shotgun sequencing project.  He had approximately 1.8 million nucleotides.
			//He divided them into 20,000 or 30,000 segments.  That ratio comes to 100 nucleotides to 1.6 fragments.
			choice = Integer.parseInt(keyboardInput.getKeyboardInput("How long would you like the random sequence to be? (length of 500 suggested)"));
			int pass = 0;
			StringBuffer sb = new StringBuffer();

			while(pass < choice)
			{
				int number = randomNumber.nextInt(4);
					if (number == 1)
					{
						sb.append("A");
						pass++;
					}
					if (number == 2)
					{
						sb.append("T");
						pass++;
					}
					if (number == 3)
					{
						sb.append("G");
						pass++;
					}
					if (number == 4)
					{
						sb.append("C");
						pass++;
					}				
			}

			String sequenceString = sb.toString();
			sequence[0] = sequenceString;
			replicate(sequence);
		}

		if(choice == 2)
		{
			textFile.getFileName("Specify the text file to be read");
			if (textFile.fileName.length() > 0)
			{
				int stringLength = textFile.getFileContents();
				String textFileString = textFile.text[0];
				//System.out.println(textFileString);
				sequence[0] = textFileString;

				replicate(sequence);
			}
		}

		if(choice == 3)
		{
			String manual = keyboardInput.getKeyboardInput("Please enter the desired sequence");
			sequence[0] = manual;

			replicate(sequence);
		}
	}

	public static void replicate(String[] sequence)
	{
		System.out.println();
		System.out.println("sequence: " +sequence[0]);
		System.out.println();
		int replicationNumber = Integer.parseInt(keyboardInput.getKeyboardInput("How many copies of the sequence would you like to make?"));
		String[] replicationArray = new String[replicationNumber];
		System.out.println();

		for (int i = 0; i < replicationNumber; i++)
		{
			replicationArray[i] = sequence[0];
			System.out.println("RA: " + replicationArray[0]);
		}
		partitionGenome(replicationArray, replicationNumber);
	}

	public static void partitionGenome(String[] replicationArray, int replicationNumber)
	{
		Random randomNumber2 = new Random();
		LList spliceLengths = new LList();
		LList spliceSequence = new LList();
		int lengthOfGenome = replicationArray[0].length();
		int beginning = 0;
		int length = 0;

		System.out.println();
		int spliceNumber = Integer.parseInt(keyboardInput.getKeyboardInput("After how many positions would you like to splice the sequence (recommended 1.6:100 ratio)?"));
		System.out.println();
		int fluctuation = Integer.parseInt(keyboardInput.getKeyboardInput("How many positions would you like the splice number to fluctuate?"));
		System.out.println();

		int totalNeededSplices = ((lengthOfGenome / (spliceNumber - fluctuation)) * replicationNumber);
		System.out.println("splices " + totalNeededSplices);
		int pass = 0;

		while (pass < totalNeededSplices)
		{
			int randomNumber = randomNumber2.nextInt((fluctuation * 2));
			int partitionValue = ((spliceNumber - fluctuation) + randomNumber);
			Integer Int = new Integer(partitionValue);
			spliceLengths.add(Int);
			pass++;
		}

		for (int i = 0; i < spliceLengths.getLength(); i++)
		{
			System.out.println("beginning " + beginning);
			System.out.println("length " + length);
			//System.out.println((Integer)(spliceLengths.getEntry(i)));
			int entry = ((Integer)(spliceLengths.getEntry(i+1))).intValue();
			length = entry + beginning;
			//System.out.println(length);
			String sequence = replicationArray[i];
			String splice = sequence.Substring(beginning, length);
			spliceSequence.add((Object)splice);
			beginning = beginning + length + 1;
		}
		//System.out.println(lengthOfGenome);
	}
}
